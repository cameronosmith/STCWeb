{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Speech to Command Speech to Command is the first dictation software compatible and optimized for coding. Coding with existing dictation software is impossible, as code is not written in plain English. Using verbal phrases written in customizable phrase dictionaries, programmers can now map key sequences to voice commands, rendering coding by dictation finally practicable. The first and only: Customizable dication software. Dictation software compatible with programming. Free dictation software. Examples from customizable Java dictionary console : System.out.println(); keyPress(KEY_LEFT,KEY_LEFT,KEY_LEFT) 'hello world' main : public static void main(String args{}) keyPress(KEY_LEFT,KEY_LEFT,KEY_ENTER) Live Demo","title":"Home"},{"location":"#speech-to-command","text":"Speech to Command is the first dictation software compatible and optimized for coding. Coding with existing dictation software is impossible, as code is not written in plain English. Using verbal phrases written in customizable phrase dictionaries, programmers can now map key sequences to voice commands, rendering coding by dictation finally practicable. The first and only: Customizable dication software. Dictation software compatible with programming. Free dictation software.","title":"Speech to Command"},{"location":"#examples-from-customizable-java-dictionary","text":"console : System.out.println(); keyPress(KEY_LEFT,KEY_LEFT,KEY_LEFT) 'hello world' main : public static void main(String args{}) keyPress(KEY_LEFT,KEY_LEFT,KEY_ENTER)","title":"Examples from customizable Java dictionary"},{"location":"#live-demo","text":"","title":"Live Demo"},{"location":"about/","text":"About Last summer, I developed a bad case of RSI (repetitive strain injury) from going to the gym part of the day, and programming for too many hours in the rest of the day . My hands hurt so much to the point where I was typing with chopsticks. I was really upset to discover that no program existed that allowed programmers to code with dictation (normal dictation is impossible to code with as code != english). So, I built Speech to Command , the first free dictation software, and the first customizable dictation software, designed for programmers. General Usage / For Whom Speech to Command is not limited to coding, and can be used for normal dictation as well. It is built to support any language, as you can build your own libraries. The basic unit of any custom library or phrase dictionary is the speech phrase, and corresponding the key sequence command to simulate you typing on your keyboard. The key sequence can contain normal ascii characters as well as non-ascii key presses. This program is not only built for coders with hand-disabilities, but also those who wish to improve their efficieny with a combination of typing and using voice commands to simulate tedious typings. Other / Time Frame I'd recommend investing in a decent microphone if the speech recognition seems slower than the demo video. Using Speech to Command will take you around a week to become close to as efficient as you were with a keyboard. This time frame may be doubled if you have no experience with a keyboard based page navigation editor such as vim, as navigating the page without your arrow keys can be initially daunting. I reccomend learning vim separately to increase this time frame. Contact / Me I'm a 19 year old student studying computer science at UCSD. Github: cameronosmith Personal email: cameronsmithbusiness@gmail.com","title":"About"},{"location":"about/#about","text":"Last summer, I developed a bad case of RSI (repetitive strain injury) from going to the gym part of the day, and programming for too many hours in the rest of the day . My hands hurt so much to the point where I was typing with chopsticks. I was really upset to discover that no program existed that allowed programmers to code with dictation (normal dictation is impossible to code with as code != english). So, I built Speech to Command , the first free dictation software, and the first customizable dictation software, designed for programmers.","title":"About"},{"location":"about/#general-usage-for-whom","text":"Speech to Command is not limited to coding, and can be used for normal dictation as well. It is built to support any language, as you can build your own libraries. The basic unit of any custom library or phrase dictionary is the speech phrase, and corresponding the key sequence command to simulate you typing on your keyboard. The key sequence can contain normal ascii characters as well as non-ascii key presses. This program is not only built for coders with hand-disabilities, but also those who wish to improve their efficieny with a combination of typing and using voice commands to simulate tedious typings.","title":"General Usage / For Whom"},{"location":"about/#other-time-frame","text":"I'd recommend investing in a decent microphone if the speech recognition seems slower than the demo video. Using Speech to Command will take you around a week to become close to as efficient as you were with a keyboard. This time frame may be doubled if you have no experience with a keyboard based page navigation editor such as vim, as navigating the page without your arrow keys can be initially daunting. I reccomend learning vim separately to increase this time frame.","title":"Other / Time Frame"},{"location":"about/#contact-me","text":"I'm a 19 year old student studying computer science at UCSD. Github: cameronosmith Personal email: cameronsmithbusiness@gmail.com","title":"Contact / Me"},{"location":"documentation/","text":"Documentation Overview / Initial Usage You are using Speech to Command either because you have some temporary or permanent hand disability (likely RSI), or wish to improve your typing efficiency by building voice-activated typing macros to replace tedious and repetitive phrases. This program also performs perfectly as a normal dictation software, and is the only free one, so perhaps you are using this program for general dictation as well. If you are just using this for general dictation, perhaps only the Dictation Modes section is relevant. Otherwise, the following documentation is primarily useful for dictation coding. The first hurdle you will encounter with dictation programming is navigating the document without the mouse or arrow-keys. To become skilled at navigating the document by voice, you need to use an editor or environment that supports vim or another key-based navigation. Most editors support vim; for example: Sublime supports it (it has a mode called \"Vintage Mode\" that supports vim navigation), Eclipse has a plugin to support vim nav., and etc. I recommend you learn to navigate a page with vim before beginning, as this will expedite your transition to voice programming and benefit you greatly in becoming a more effective programmer, whether typing by voice or hands. The next dilemma you'll encounter is that code is not written in English, but rather an unnatural mix of syntax and punctuations that is natural to the programmer, but unsuitable with normal dictation softwares. This is where Speech to Command is vital. Using dictation vocabularies, you can customize and define macros where unique phrases will trigger defined key sequences. Check out the front page for two quick examples. You'll need to use the vim library to navigate your document, and build more libraries based on the programming language your using, specific to your required syntax. For example, I've included a java library with some basic java commands I use to improve my programming efficiency. Dictation Modes The program has five dictation modes that control the formatting of the words typed to give you greater access to your \"voice keyboard\" as modifier keys: full-caps : every letter of the word is typed in caps example: \"hello world\" -> \"HELLO WORLD\" speak the phrase \"caps\" to toggle this mode (hover over the mode in the GUI for the hint). usefulness: when you need to type in all caps semi-caps : every first letter of the word is typed in caps example: \"hello world\" -> \"Hello World\" speak the phrase \"semi\" to toggle this mode. usefulness: camel casing spacing : appends a after every word example: \"hello world\" -> \"hello world\" example with spacing toggled off: \"hello world\" -> \"helloworld\" speak the phrase \"spacing\" to toggle this mode. usefulness: normal dictation or when you want to control whether to append spaces after every word typing : types the first letter of every word example: \"hello world\" -> \"hw\" speak the phrase \"typing\" to toggle this mode. this mode is useful when you need to type a single letter pure-dictation : types the word literally, ignoring any dictation library commands example: \"hello world\" -> \"hw\" speak the phrase \"scribe\" to toggle this mode. this mode is useful when you need to type a single letter Dictation Vocabulary To view your grammars or create a grammars, scroll down on the dictation bar interface. The basic format is a unique phrase to trigger the corresponding key sequence. For example, click the new command button at the bottom right of your grammar, enter the phrase \"hello\" and the command \"salutations good friend\". When the dictation recognizes your phrase \"hello\", it will instead type the corresponding \"salutations good friend\". note: Stick to phrases that are distinct and won't be recognized as other homophones. ex: \"main\" could be recognized as \"maine\" or \"two\" as \"too\" or \"to\". You can also avoid this by padding your words with their similar recognized words, as I include \"cup\" with the same definition as \"up\" so they map to the same key sequence. a good example of a distinct word is \"reject\" as not many words sound the same. For including non-Ascii key presses, such as pressing the arrow or enter keys, see the section Non-Ascii Key Simulations . Using the Dictation Interface (GUI) The dictation interface has four sections: the microphone toggle (upper left) : click this button to toggle listening on and off (whether you want speech recognition or not) dictation console (upper right) : this console gives you feedback on recognized words and whether they are processed as dictation commands or just plain words. dictation modes (below dictation console) : these are the graphical representation of the dictation modes. click to toggle any mode. a mode is on if it is blue and off if red. for further instructions on dictation modes, see the Dictation Modes section. grammars (scroll down) : these are your current dictation grammars or vocabularies. hover over for their dropdown options to toggle, edit, or delete any. a grammar is blue if on and red if toggled off (not going to be checked for commands). use the new grammar button to create a new grammar. for any confusion on grammars, view the Dictation Vocabulary section. Navigating your document In order to navigate your document with speed by voice, you should learn to use vim first. Learn the vim library or make your own. At first, your experience will be frustrating as producing the correct voice phrase to match your desired action will take time. It will probably cost you a frustrating week to be able to navigate the document fluently, but once you get over the learning curve and combine multiple commands, you'll be zoomin. Don't want to use vim since you're scared of your terminal? Most editors today, recognizing that vim is the fastest way to zoom around the document, support vim navigation. For example, Sublime has 'vintage mode', Atom has a vim package, and Eclipse has a vim plugin, to name a few popular editors you might use. Non-Ascii Key Simulations To automate non-Ascii key presses in your grammar vocabularies, such as pressing the arrow keys or enter key, you need to follow the format of the keyPress argument. begin: start the non-Ascii request with 'keyPress()'. inside the '()': inside the parenthesis, enter the name to the corresponding keycode, found in the table below. for example, to press the left arrow key two times: keyPress(KEY_LEFT,KEY_LEFT) note: you cannot include spaces in between the keys, as they will be registered as individual words to type. if you want to enter a custom keycode instead of the presets, you can subsitute the keycode in place of the keycode preset. this program uses java's robot keycodes to simulate typing, so use those as your best source for keycodes. Disclaimer: I haven't tested each of these keys because I don't care that much about random keys. If there are any keys not working, send me a message (find my contact on the about page) and I'll fix it. Key Name Key Code","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#overview-initial-usage","text":"You are using Speech to Command either because you have some temporary or permanent hand disability (likely RSI), or wish to improve your typing efficiency by building voice-activated typing macros to replace tedious and repetitive phrases. This program also performs perfectly as a normal dictation software, and is the only free one, so perhaps you are using this program for general dictation as well. If you are just using this for general dictation, perhaps only the Dictation Modes section is relevant. Otherwise, the following documentation is primarily useful for dictation coding. The first hurdle you will encounter with dictation programming is navigating the document without the mouse or arrow-keys. To become skilled at navigating the document by voice, you need to use an editor or environment that supports vim or another key-based navigation. Most editors support vim; for example: Sublime supports it (it has a mode called \"Vintage Mode\" that supports vim navigation), Eclipse has a plugin to support vim nav., and etc. I recommend you learn to navigate a page with vim before beginning, as this will expedite your transition to voice programming and benefit you greatly in becoming a more effective programmer, whether typing by voice or hands. The next dilemma you'll encounter is that code is not written in English, but rather an unnatural mix of syntax and punctuations that is natural to the programmer, but unsuitable with normal dictation softwares. This is where Speech to Command is vital. Using dictation vocabularies, you can customize and define macros where unique phrases will trigger defined key sequences. Check out the front page for two quick examples. You'll need to use the vim library to navigate your document, and build more libraries based on the programming language your using, specific to your required syntax. For example, I've included a java library with some basic java commands I use to improve my programming efficiency.","title":"Overview / Initial Usage"},{"location":"documentation/#dictation-modes","text":"The program has five dictation modes that control the formatting of the words typed to give you greater access to your \"voice keyboard\" as modifier keys: full-caps : every letter of the word is typed in caps example: \"hello world\" -> \"HELLO WORLD\" speak the phrase \"caps\" to toggle this mode (hover over the mode in the GUI for the hint). usefulness: when you need to type in all caps semi-caps : every first letter of the word is typed in caps example: \"hello world\" -> \"Hello World\" speak the phrase \"semi\" to toggle this mode. usefulness: camel casing spacing : appends a after every word example: \"hello world\" -> \"hello world\" example with spacing toggled off: \"hello world\" -> \"helloworld\" speak the phrase \"spacing\" to toggle this mode. usefulness: normal dictation or when you want to control whether to append spaces after every word typing : types the first letter of every word example: \"hello world\" -> \"hw\" speak the phrase \"typing\" to toggle this mode. this mode is useful when you need to type a single letter pure-dictation : types the word literally, ignoring any dictation library commands example: \"hello world\" -> \"hw\" speak the phrase \"scribe\" to toggle this mode. this mode is useful when you need to type a single letter","title":"Dictation Modes"},{"location":"documentation/#dictation-vocabulary","text":"To view your grammars or create a grammars, scroll down on the dictation bar interface. The basic format is a unique phrase to trigger the corresponding key sequence. For example, click the new command button at the bottom right of your grammar, enter the phrase \"hello\" and the command \"salutations good friend\". When the dictation recognizes your phrase \"hello\", it will instead type the corresponding \"salutations good friend\". note: Stick to phrases that are distinct and won't be recognized as other homophones. ex: \"main\" could be recognized as \"maine\" or \"two\" as \"too\" or \"to\". You can also avoid this by padding your words with their similar recognized words, as I include \"cup\" with the same definition as \"up\" so they map to the same key sequence. a good example of a distinct word is \"reject\" as not many words sound the same. For including non-Ascii key presses, such as pressing the arrow or enter keys, see the section Non-Ascii Key Simulations .","title":"Dictation Vocabulary"},{"location":"documentation/#using-the-dictation-interface-gui","text":"The dictation interface has four sections: the microphone toggle (upper left) : click this button to toggle listening on and off (whether you want speech recognition or not) dictation console (upper right) : this console gives you feedback on recognized words and whether they are processed as dictation commands or just plain words. dictation modes (below dictation console) : these are the graphical representation of the dictation modes. click to toggle any mode. a mode is on if it is blue and off if red. for further instructions on dictation modes, see the Dictation Modes section. grammars (scroll down) : these are your current dictation grammars or vocabularies. hover over for their dropdown options to toggle, edit, or delete any. a grammar is blue if on and red if toggled off (not going to be checked for commands). use the new grammar button to create a new grammar. for any confusion on grammars, view the Dictation Vocabulary section.","title":"Using the Dictation Interface (GUI)"},{"location":"documentation/#navigating-your-document","text":"In order to navigate your document with speed by voice, you should learn to use vim first. Learn the vim library or make your own. At first, your experience will be frustrating as producing the correct voice phrase to match your desired action will take time. It will probably cost you a frustrating week to be able to navigate the document fluently, but once you get over the learning curve and combine multiple commands, you'll be zoomin. Don't want to use vim since you're scared of your terminal? Most editors today, recognizing that vim is the fastest way to zoom around the document, support vim navigation. For example, Sublime has 'vintage mode', Atom has a vim package, and Eclipse has a vim plugin, to name a few popular editors you might use.","title":"Navigating your document"},{"location":"documentation/#non-ascii-key-simulations","text":"To automate non-Ascii key presses in your grammar vocabularies, such as pressing the arrow keys or enter key, you need to follow the format of the keyPress argument. begin: start the non-Ascii request with 'keyPress()'. inside the '()': inside the parenthesis, enter the name to the corresponding keycode, found in the table below. for example, to press the left arrow key two times: keyPress(KEY_LEFT,KEY_LEFT) note: you cannot include spaces in between the keys, as they will be registered as individual words to type. if you want to enter a custom keycode instead of the presets, you can subsitute the keycode in place of the keycode preset. this program uses java's robot keycodes to simulate typing, so use those as your best source for keycodes. Disclaimer: I haven't tested each of these keys because I don't care that much about random keys. If there are any keys not working, send me a message (find my contact on the about page) and I'll fix it. Key Name Key Code","title":"Non-Ascii Key Simulations"},{"location":"download/","text":"Download Speech to Command is the first customizable dictation software, built for but not limited to programmers. Click to Download Requirements must have the JRE (Java runtime environment) installed check by entering the command java into the mac/linux terminal or windows cmd Mac/Linux users almost always have the php command installed, but make sure you can execute php ... from the command line. Must have Google Chrome browser installed (Default) Mac users must have their chrome installed at the default location of /Applications/Google Chrome.app/Contents/MacOS/Google Chrome (Default) Linux users should test that their chrome works by executing the command chrome from the command line (Default) Windows users should be able to access chrome by executing the command start chrome from the command line Optional Payment As it is built to help those with RSI and other hand disabilities, I have decided to not explicitly charge for this program as I want to support those who need it but cannot afford it. However, I have poured countless hours into the research and development of this project to help those in need like myself. Please consider offering a small donation of $10.00 to help support the continual development of this software. I'm a college student without a job so please send some love <3. support me on venmo please! venmo: canyoucam","title":"Download"},{"location":"download/#download","text":"Speech to Command is the first customizable dictation software, built for but not limited to programmers.","title":"Download"},{"location":"download/#requirements","text":"must have the JRE (Java runtime environment) installed check by entering the command java into the mac/linux terminal or windows cmd Mac/Linux users almost always have the php command installed, but make sure you can execute php ... from the command line. Must have Google Chrome browser installed (Default) Mac users must have their chrome installed at the default location of /Applications/Google Chrome.app/Contents/MacOS/Google Chrome (Default) Linux users should test that their chrome works by executing the command chrome from the command line (Default) Windows users should be able to access chrome by executing the command start chrome from the command line","title":"Requirements"},{"location":"download/#optional-payment","text":"As it is built to help those with RSI and other hand disabilities, I have decided to not explicitly charge for this program as I want to support those who need it but cannot afford it. However, I have poured countless hours into the research and development of this project to help those in need like myself. Please consider offering a small donation of $10.00 to help support the continual development of this software. I'm a college student without a job so please send some love <3. support me on venmo please! venmo: canyoucam","title":"Optional Payment"}]}